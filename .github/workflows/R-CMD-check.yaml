on:
  push:
  pull_request:
  schedule:
    - cron:  '40 4 * * 1'

name: "CI"
jobs:
  Update-readme-md:
    runs-on: ubuntu-latest 
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
      - uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: '2.7.3' # The pandoc version to download (if necessary) and use.
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: local::.

      - name: Render README
        run: rmarkdown::render("README.Rmd")
        shell: Rscript {0}
      - name: Commit and push changes
        run: |
          if [[ `git status --porcelain` ]]; then
           git config user.name 'github-actions[bot]'
           git config user.email 'github-actions[bot]@users.noreply.github.com'
           git add -A
           git commit -m "Re-render README"
           git push
          fi
          
  lint-package:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: | 
            any::styler
            any::roxygen2
      - name: Lint package
        run: styler::style_pkg()
        shell: Rscript {0}
      - name: Commit and push changes
        run: |
          if [[ `git status --porcelain` ]]; then
           git config user.name 'github-actions[bot]'
           git config user.email 'github-actions[bot]@users.noreply.github.com'
           git add -A
           git commit -m "Lint package"
           git push
          fi
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-12, r: 'release'}
          - {os: macOS-12, r: 'devel'}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04, r: 'oldrel-1', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04, r: 'oldrel-2', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
    steps:
      - uses: actions/checkout@v4
      - uses: r-lib/actions/setup-r@v2
      - uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: '2.7.3' # The pandoc version to download (if necessary) and use.
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check
      - name: Check
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ matrix.config.os }} (${{ matrix.config.r }}) shiny-test
          path: tests/testthat/_snaps/
          retention-days: 5
      - name: Install dependencies
        run: |
          install.packages(c("remotes"))
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("covr")
        shell: Rscript {0}

      - name: Test coverage
        run: covr::codecov(token = Sys.getenv("secrets.CODECOV_TOKEN"))
        shell: Rscript {0}

